import {
  Signer,
  DID,
  Principal,
  Proof,
  Result,
  Variant
} from '@ucanto/interface'
import { PieceRecord, PieceRecordKey } from '@storacha/filecoin-api/storefront/api'

export { Failure } from '@ucanto/core'

export interface FilecoinMetricsStore {
  incrementTotal: (metricName: string, n: number) => Promise<void>
  incrementTotals: (metricsToUpdate: Record<string, number>) => Promise<void>
}

export interface FilecoinMetricsCtx {
  filecoinMetricsStore: FilecoinMetricsStore
  workflowStore: WorkflowBucket
  startEpochMs?: number
}

export interface FilecoinAggregateOfferMetricsCtx extends FilecoinMetricsCtx {
  invocationStore: InvocationBucket
}

export interface WorkflowBucket {
  get: (Cid: string) => Promise<Uint8Array|undefined>
}

export interface InvocationBucket {
  getInLink: (cid: string) => Promise<string|undefined>
}


export interface ClaimsInvocationConfig {
  /**
   * Signing authority that is issuing the UCAN invocation(s).
   */
  issuer: Signer
  /**
   * The principal delegated to in the current UCAN.
   */
  audience: Principal
  /**
   * The resource the invocation applies to.
   */
  with: DID
  /**
   * Proof(s) the issuer has the capability to perform the action.
   */
  proofs?: Proof[]
}

// Store records
export type InferStoreRecord<T> = {
  [Property in keyof T]: T[Property] extends Number ? T[Property] : string
}

export interface PieceStoreRecord extends Omit<InferStoreRecord<PieceRecord>, 'status'> {
  stat: number
}

export interface PieceStoreRecordKey extends InferStoreRecord<PieceRecordKey> {}

export enum PieceStoreRecordStatus {
  Submitted = 0,
  Accepted = 1,
  Invalid = 2
}

export type { Result, Variant }

// would be generated by sst, but requires `sst build` to be run, which calls out to aws; not great for CI
declare module 'sst/node/config' {
  export interface SecretResources {
    PRIVATE_KEY: {
      value: string
    }
  }
}
